sqlcd{
  licence{
    # File location for list of licence keys
    licenceLocation = "${SQLCD_HOME}/licence-keys.csv"
    # File location for list of licensed users
    usersLocation = "${SQLCD_HOME}/licensed-users.csv"
  }
  mail{
    # Mail server used to send build alerts to users
    enabled = false
    startupTestMail = false # Send a test email to self on server startup
    sender = "" # Sender's email address
    login{
      username = "test@localhost.com"
      password = "password"
    }
    smtp {
      auth = true
      starttls.enable = true
      host = "m.outlook.com"
      port = "587"
    }
  }
  # Directory for JDBD database drivers.
  # Each driver (1 or more jars) should be contained in a folder with the name of its JDBC driver class name
  #   eg. org.postgresql.Driver. Please see existing drivers
  driverDirectory = "${SQLCD_HOME}/drivers/"
  git{
    # Directory where local git repositories will be stored
    localDirectory = "${SQLCD_HOME}/data/repos/"
    # How often (in ms) remote git repositories will be polled for updates (eg. new commits, branches, etc..)
    # For local repositories that you manage, this could be a low number (eg. 5 seconds).
    # For external repositories (eg. github), this should be a higher number 30 seconds +
    pollTime = ${GIT_POLL_TIME} # 5 seconds
  }
  client{
    # Length of time in ms that client tokens are valid without having to re-login
    tokenExpiry = 604800000 #7 days
    # Length of time in ms that automated builds will remain in a client's build pane
    retainBuildsExpiry = 86400000 # 1 day
  }
  execution{
    # Number of concurrent build job execution allowed
    # To have unlimited concurrent jobs set this as 0 or comment out
    globalLimit = 5
    # File name for unmanaged pipeline start up script
    setupExecutionFileName = "before.sql"
    # File name for unmanaged pipeline tear down script
    teardownExecutionFileName = "after.sql"
  }
  security{
    # Key used to encrypt stored passwords, you may want to set this in a folder on an encrypted volume and with the appropriate file pemissions. eg. 700
    # This key is automatically generated the first time the server is started
    keyLocation = "${SQLCD_HOME}/data/key"
  }

  #Configuration of internal database.
  internalDb{
    jdbc {
      driver = "org.h2.Driver"
      url = "jdbc:h2:file:${SQLCD_HOME}/data/db"
      username = "user"
      password = "password"
    }
  }
}
akka {
  jvm-exit-on-fatal-error = false
  http.server{
    default-http-port = 7080
    idle-timeout = 180 s
    request-timeout = 180 s
  }
  http.client{
    idle-timeout = 180 s
  }
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}